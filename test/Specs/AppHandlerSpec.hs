module Specs.AppHandlerSpec where

import App (fruitHandler)
import qualified App
import Control.Concurrent.MVar
import Control.Exception (bracket)
import Data.Proxy (Proxy (Proxy))
import Fruit.API
import GHC.Generics
import Network.HTTP.Client (defaultManagerSettings, newManager)
import qualified Network.Wai.Handler.Warp as Warp
import Servant.Client
import Servant.Server (serve)
import Test.Hspec
import Test.Hspec.Wai
import Test.Hspec.Wai.Matcher

spec :: Spec
spec =
  do
    -- create a servant-client ClientEnv
    baseUrl <- runIO $ parseBaseUrl "http://localhost"
    manager <- runIO $ newManager defaultManagerSettings
    let clientEnv port = mkClientEnv manager (baseUrl {baseUrlPort = port})

    describe "App handlers" $ do
      -- `around` will start the server, and then stop it once the tests complete
      describe "fruitHandler" $
        around fruitServer $ do
          it "Apple is a delicious fruit" $ \port -> do
            result <- runClientM (checkFruit (CheckFruitRequest Apple Fruit)) (clientEnv port)
            result `shouldBe` (Right $ CheckFruitResponse {delicious = True, correct = True})

fruitAPI :: Proxy FruitAPI
fruitAPI = Proxy :: Proxy FruitAPI

fruitServer :: (Warp.Port -> IO a) -> IO a
fruitServer action = Warp.testWithApplication (pure $ serve fruitAPI fruitHandler) action

-- A client that will be used to make the requests, generated by servant-client
checkFruit :: CheckFruitRequest -> ClientM CheckFruitResponse
checkFruit = client fruitAPI
